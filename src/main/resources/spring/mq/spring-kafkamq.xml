<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <description>kafka消息队列</description>

    <context:property-placeholder location="classpath:kafka.properties" ignore-unresolvable="true"/>

    <!-- 配置producer -->
    <!-- 定义producer的参数 -->
    <bean id="kafkaProducerProperties" class="java.util.HashMap">
        <constructor-arg>
            <map>
                <entry key="bootstrap.servers" value="${kafka.bootstrap.servers}"/>
                <!--<entry key="group.id" value="${kafka.group.id}"/>-->
                <entry key="retries" value="${kafka.retries}"/>
                <entry key="batch.size" value="${kafka.batch.size}"/>
                <entry key="linger.ms" value="${kafka.linger.ms}"/>
                <entry key="buffer.memory" value="${kafka.buffer.memory}"/>
                <entry key="acks" value="${kafka.acks}"/>
                <entry key="key.serializer" value="org.apache.kafka.common.serialization.StringSerializer"/>
                <entry key="value.serializer" value="org.apache.kafka.common.serialization.StringSerializer"/>
            </map>
        </constructor-arg>
    </bean>
    <!-- 创建kafkatemplate需要使用的producerfactory bean -->
    <bean id="kafkaProducerFactory" class="org.springframework.kafka.core.DefaultKafkaProducerFactory">
        <constructor-arg ref="kafkaProducerProperties"/>
    </bean>
    <!-- 创建kafkatemplate bean, 使用的时候, 只需要注入这个bean, 即可使用template的send消息方法 -->
    <bean id="kafkaTemplate" class="org.springframework.kafka.core.KafkaTemplate">
        <constructor-arg name="producerFactory" ref="kafkaProducerFactory"/>
        <constructor-arg name="autoFlush" value="true"/>
        <!--<property name="defaultTopic" value="default"/>-->
    </bean>
    <!-- 定义kafka发布者 -->
    <bean id="myKafkaMqProducer" class="com.yangkang.ssmdemo01.mq.MyKafkaMqProducer">
        <property name="kafkaTemplate" ref="kafkaTemplate"/>
    </bean>

    <!-- 配置consumer -->
    <!-- 定义consumer参数 -->
    <bean id="kafkaConsumerProperties" class="java.util.HashMap">
        <constructor-arg>
            <map>
                <entry key="bootstrap.servers" value="${kafka.bootstrap.servers}"/>
                <entry key="group.id" value="${kafka.group.id}"/>
                <entry key="enable.auto.commit" value="${kafka.enable.auto.commit}"/>
                <entry key="session.timeout.ms" value="${kafka.session.timeout.ms}"/>
                <entry key="key.deserializer" value="org.apache.kafka.common.serialization.StringDeserializer"/>
                <entry key="value.deserializer" value="org.apache.kafka.common.serialization.StringDeserializer"/>
            </map>
        </constructor-arg>
    </bean>
    <!-- 创建consumerFactory bean -->
    <bean id="kafkaConsumerFactory" class="org.springframework.kafka.core.DefaultKafkaConsumerFactory">
        <constructor-arg ref="kafkaConsumerProperties"/>
    </bean>
    <!-- 定义消费实现类 -->
    <bean id="myKafkaMqConsumer" class="com.yangkang.ssmdemo01.mq.MyKafkaMqConsumer"/>
    <!-- 消费者容器配置信息 -->
    <bean id="kafkaContainerProperties" class="org.springframework.kafka.listener.ContainerProperties">
        <constructor-arg name="topics">
            <list>
                <value>test</value>
                <!--<value>test2</value>-->
            </list>
        </constructor-arg>
        <property name="messageListener" ref="myKafkaMqConsumer"/>
    </bean>
    <!-- 消费者并发消息监听容器, 执行doStart()方法 -->
    <bean id="kafkaMessageListenerContainer" class="org.springframework.kafka.listener.ConcurrentMessageListenerContainer" init-method="doStart">
        <constructor-arg ref="kafkaConsumerFactory"/>
        <constructor-arg ref="kafkaContainerProperties"/>
        <property name="concurrency" value="${kafka.concurrency}"/>
    </bean>
</beans>