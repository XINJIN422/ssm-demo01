<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd">

    <description>redis缓存配置管理文件-自定义操作</description>

    <!--配置redis连接池-->
    <beans:import resource="classpath:spring/cache/redis-pool.xml"/>
    <!--spring-data-redis2.0以上的配置-->
    <bean id="redisPassword" class="org.springframework.data.redis.connection.RedisPassword">
        <constructor-arg name="thePassword" value="${redis.password}"/>
    </bean>
    <bean id="redisStandaloneConfiguration" class="org.springframework.data.redis.connection.RedisStandaloneConfiguration">
        <property name="hostName" value="${redis.cache.host}"/>
        <property name="port" value="${redis.cache.port}"/>
        <property name="password" ref="redisPassword"/>
        <property name="database" value="${redis.cache.dbIndex}"/>
    </bean>
    <!--配置jedis链接工厂 spring-data-redis2.0中
        建议改为构造器传入一个RedisStandaloneConfiguration  单机
                            RedisSentinelConfiguration  主从复制
                            RedisClusterConfiguration  集群-->
    <bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!--注销掉的部分为spring-data-redis2.0以下的版本配置的方式-->
        <!--<property name="hostName" value="${redis.host}"/>-->
        <!--<property name="port" value="${redis.port}"/>-->
        <!--<property name="poolConfig" ref="jedisPoolConfig"/>-->
        <!--<property name="password" value="${redis.auth}" />-->
        <!--<property name="database" value="${redis.dbIndex}"/>-->
        <!--spring-data-redis2.0以上建议获取的方式-->
        <constructor-arg name="standaloneConfig" ref="redisStandaloneConfiguration"/>
    </bean>

    <!--手动设置 key 与 value 的序列化方式-->
    <bean id="keySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="valueSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>

    <!--redis模板操作类-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <!--序列化/反序列化解析器，默认是jdk自带的解析器，但性能比较低，待选择一个性能比较高的序列化工具在此指定即可-->
        <!--<property name="keySerializer" value="XX"/>-->
        <!--<property name="valueSerializer" value="XX"/>-->
        <!--<property name="hashKeySerializer" value="XX"/>-->
        <!--<property name="hashValueSerializer" value="XX"/>-->
        <!--别人用的jdkredisTemplate-->
        <!--<property name="keySerializer" ref="stringRedisSerializer"/>-->
        <!--<property name="valueSerializer" ref="stringRedisSerializer"/>-->
        <!--<property name="hashKeySerializer" ref="stringRedisSerializer"/>-->
        <!--<property name="hashValueSerializer" ref="jackson2JsonRedisSerializer"/>-->
        <!--别人用的jacksonredisTemplate-->
        <!--<property name="keySerializer" ref="jackson2JsonRedisSerializer"/>-->
        <!--<property name="valueSerializer" ref="jackson2JsonRedisSerializer"/>-->
        <!--<property name="hashKeySerializer" ref="stringRedisSerializer"/>-->
        <!--<property name="hashValueSerializer" ref="jackson2JsonRedisSerializer"/>-->
        <property name="connectionFactory" ref="redisConnectionFactory"/>
        <property name="keySerializer" ref="keySerializer"/>
        <property name="valueSerializer" ref="valueSerializer"/>
        <property name="hashKeySerializer" ref="keySerializer"/>
        <property name="hashValueSerializer" ref="valueSerializer"/>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean>
    <!--也可以StringRedisTemplate 专注于String的操作-->
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <!--<property name="connectionFactory" ref="jedisConnectionFactory"></property>-->
        <!--在StringRedisTemplate与redisTemplate不同,可以直接造构造器中传入ConnectionFactory-->
        <constructor-arg name="connectionFactory" ref="redisConnectionFactory"/>
        <property name="keySerializer" ref="keySerializer"/>
        <property name="valueSerializer" ref="valueSerializer"/>
        <property name="hashKeySerializer" ref="keySerializer"/>
        <property name="hashValueSerializer" ref="valueSerializer"/>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean>

    <!--交给spring管理-->
    <!--默认的配置会初始化一个永不过期，使用StringRedisSerializer序列化key，使用JdkSerializationRedisSerializer序列化value的配置-->
    <!--这样和上面的template不统一,注解写入和工具类读出不一样,可以参考一来创建自己想要的序列化方式-->
    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"
          factory-method="create" >
        <constructor-arg name="connectionFactory" ref="redisConnectionFactory"/>
    </bean>
    <!--开启spring缓存注解-->
    <cache:annotation-driven cache-manager="redisCacheManager"/>

    <!--自定义的redis操作工具类-->
    <bean id="myRedisCacheUtil" class="com.yangkang.ssmdemo01.redis.MyRedisCacheUtil">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>
</beans>