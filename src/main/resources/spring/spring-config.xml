<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 扫描service,dao包下所有使用注解的类型 -->
    <context:component-scan base-package="com.yangkang.ssmdemo01.mvc.dao"/>
    <context:component-scan base-package="com.yangkang.ssmdemo01.mvc.service"/>

    <!-- 配置数据库相关参数properties的属性：${url} (因为有两个property-placeholder了,所以必须带上ignore-unresolvable="true"属性或者合并到一处) -->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
    <!--<bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
        <!--<property name="locations">-->
            <!--<list>-->
                <!--<value>classpath:redis.properties</value>-->
                <!--<value>classpath:jdbc.properties</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- 引入jdbc配置文件的第二种方法 -->
    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
        <!--<property name="locations">-->
            <!--<list>-->
                <!--<value>classpath:classpath:jdbc.properties</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- 第一种数据源配置方式:最基础的mybatis组成(entity,dao,mapper) -->
    <!--<beans:import resource="classpath:spring/ds/ds-initialbatis.xml"/>-->

    <!-- 第二种数据源配置方式:统一封装dao(只写个sql的mapper映射文件就行) by yangkang -->
    <!--<beans:import resource="classpath:spring/ds/ds-packageofdao.xml"/>-->

    <!-- 第三种数据源配置:上面两种都是c3p0连接池,这里是dbcp连接池,同上封装dao by yangkang -->
    <!--<beans:import resource="classpath:spring/ds/ds-dbcpversion.xml"/>-->

    <!-- 第四种数据源配置:JNDI+tomcat dbcp方式,同上封装dao by yangkang  -->
    <!--<beans:import resource="classpath:spring/ds/ds-jndiversion.xml"/>-->

    <!-- 第五种数据源配置:druid连接池,同上封装dao by yangkang -->
    <beans:import resource="classpath:spring/ds/ds-druidversion.xml"/>

    <!-- 第六种数据源配置:hikariCP连接池,同上封装dao by yangkang -->
    <!--<beans:import resource="classpath:spring/ds/ds-hikariCPversion.xml"/>-->

    <!-- AspectJ风格,注解式spring aop切面编程配置 -->
    <!-- 还有一种spring aop配置方法,就是使用<aop:config>标签在xml中配置 -->
    <!--<beans:import resource="classpath:spring/spring-aspectj-serv.xml" />-->

    <!--Ehcache缓存管理-->
    <!--<beans:import resource="classpath:spring/cache/spring-ehcache.xml"/>-->

    <!--redis缓存-->
    <!--<beans:import resource="classpath:spring/cache/spring-rediscache.xml"/>-->
    <!--<beans:import resource="classpath:spring/cache/spring-rediscache2.xml"/>-->
    <beans:import resource="classpath:spring/cache/spring-rediscache3.xml"/>

    <!-- 用于持有ApplicationContext,SpringContextsUtil.getBean('xxxx')的静态方法得到spring bean对象 -->
    <bean class="com.yangkang.ssmdemo01.tools.SpringContextsUtil" lazy-init="false" />

    <!--spring ioc默认为单例模式,这边可以不用scope;使用了静态工厂方法注入;-->
    <bean id="batchInsertExecutorService" class="java.util.concurrent.Executors" factory-method="newCachedThreadPool" lazy-init="true" scope="singleton" />

    <!--引入shiro安全框架-->
    <beans:import resource="classpath:spring/shiro/spring-shiro.xml"/>

    <!--引入quartz定时、周期任务调度-->
    <beans:import resource="classpath:spring/quartz/spring-quartz.xml"/>
</beans>
